package com.projectkisan.androidapp

import androidx.compose.animation.AnimatedVisibility
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.shadow
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.projectkisan.androidapp.ui.theme.*
import java.text.SimpleDateFormat
import java.util.*

@Composable
fun PlanScreen() {
    var selectedCrop by remember { mutableStateOf("Tomato") }
    var selectedDate by remember { mutableStateOf("") }
    var selectedLocation by remember { mutableStateOf("Rohtak, Haryana") }
    var isScheduleGenerated by remember { mutableStateOf(false) }

    LazyColumn(
        modifier = Modifier
            .fillMaxSize()
            .background(MaterialTheme.colorScheme.background)
            .padding(16.dp),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        item {
            Text(
                text = "Yield Maximizer",
                style = MaterialTheme.typography.headlineLarge,
                color = BlueSecondary,
                fontWeight = FontWeight.ExtraBold,
                modifier = Modifier.fillMaxWidth()
            )
            Spacer(modifier = Modifier.height(24.dp))
        }

        item {
            CultivationScheduleCard(
                selectedCrop = selectedCrop,
                onCropChange = { selectedCrop = it },
                selectedDate = selectedDate,
                onDateChange = { selectedDate = it },
                selectedLocation = selectedLocation,
                onLocationChange = { selectedLocation = it },
                onGenerateClick = { isScheduleGenerated = true }
            )
        }

        item {
            AnimatedVisibility(visible = isScheduleGenerated) {
                TodaysSchedule()
            }
        }

        item {
            Spacer(modifier = Modifier.height(24.dp))
            FertilizerCalculatorButton(onClick = { /* TODO: Navigate to Calculator page */ })
            Spacer(modifier = Modifier.height(16.dp))
        }
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun CultivationScheduleCard(
    selectedCrop: String, onCropChange: (String) -> Unit,
    selectedDate: String, onDateChange: (String) -> Unit,
    selectedLocation: String, onLocationChange: (String) -> Unit,
    onGenerateClick: () -> Unit
) {
    var isCropMenuExpanded by remember { mutableStateOf(false) }
    var isLocationMenuExpanded by remember { mutableStateOf(false) }
    var showDatePicker by remember { mutableStateOf(false) }

    val crops = listOf("Tomato", "Wheat", "Rice", "Onion")
    val locations = listOf("Rohtak, Haryana", "Ludhiana, Punjab", "Hissar, Haryana")

    Card(
        shape = RoundedCornerShape(16.dp),
        colors = CardDefaults.cardColors(containerColor = CardLight),
        modifier = Modifier.shadow(elevation = 4.dp, shape = RoundedCornerShape(16.dp))
    ) {
        Column(modifier = Modifier.padding(16.dp)) {
            Text("Cultivation Schedule", style = MaterialTheme.typography.titleLarge, fontWeight = FontWeight.Bold)
            Spacer(modifier = Modifier.height(16.dp))

            Text("Crop Name", style = MaterialTheme.typography.labelMedium, color = TextMutedLight)
            ExposedDropdownMenuBox(expanded = isCropMenuExpanded, onExpandedChange = { isCropMenuExpanded = it }) {
                OutlinedTextField(
                    value = selectedCrop,
                    onValueChange = {},
                    readOnly = true,
                    trailingIcon = { ExposedDropdownMenuDefaults.TrailingIcon(expanded = isCropMenuExpanded) },
                    modifier = Modifier.menuAnchor().fillMaxWidth(),
                    colors = OutlinedTextFieldDefaults.colors(
                        focusedBorderColor = GreenPrimary,
                        unfocusedBorderColor = TextMutedLight.copy(alpha = 0.4f)
                    )
                )
                ExposedDropdownMenu(expanded = isCropMenuExpanded, onDismissRequest = { isCropMenuExpanded = false }) {
                    crops.forEach { crop ->
                        DropdownMenuItem(text = { Text(crop) }, onClick = {
                            onCropChange(crop)
                            isCropMenuExpanded = false
                        })
                    }
                }
            }
            Spacer(modifier = Modifier.height(16.dp))

            Text("Sowing Date", style = MaterialTheme.typography.labelMedium, color = TextMutedLight)
            OutlinedTextField(
                value = selectedDate,
                onValueChange = {},
                readOnly = true,
                placeholder = { Text("dd/mm/yyyy") },
                trailingIcon = {
                    Icon(
                        painter = painterResource(id = R.drawable.ic_calendar),
                        contentDescription = "Select Date",
                        // ▼▼▼ FIX: Set tint color for XML Vector Drawable ▼▼▼
                        tint = TextMutedLight
                    )
                },
                modifier = Modifier.fillMaxWidth().clickable { showDatePicker = true },
                colors = OutlinedTextFieldDefaults.colors(
                    focusedBorderColor = GreenPrimary,
                    unfocusedBorderColor = TextMutedLight.copy(alpha = 0.4f)
                )
            )
            Spacer(modifier = Modifier.height(16.dp))

            Text("Location", style = MaterialTheme.typography.labelMedium, color = TextMutedLight)
            ExposedDropdownMenuBox(expanded = isLocationMenuExpanded, onExpandedChange = { isLocationMenuExpanded = it }) {
                OutlinedTextField(
                    value = selectedLocation,
                    onValueChange = {},
                    readOnly = true,
                    trailingIcon = { ExposedDropdownMenuDefaults.TrailingIcon(expanded = isLocationMenuExpanded) },
                    modifier = Modifier.menuAnchor().fillMaxWidth(),
                    colors = OutlinedTextFieldDefaults.colors(
                        focusedBorderColor = GreenPrimary,
                        unfocusedBorderColor = TextMutedLight.copy(alpha = 0.4f)
                    )
                )
                ExposedDropdownMenu(expanded = isLocationMenuExpanded, onDismissRequest = { isLocationMenuExpanded = false }) {
                    locations.forEach { location ->
                        DropdownMenuItem(text = { Text(location) }, onClick = {
                            onLocationChange(location)
                            isLocationMenuExpanded = false
                        })
                    }
                }
            }
            Spacer(modifier = Modifier.height(24.dp))

            Button(
                onClick = onGenerateClick,
                modifier = Modifier.fillMaxWidth().height(50.dp),
                shape = RoundedCornerShape(12.dp),
                colors = ButtonDefaults.buttonColors(containerColor = GreenPrimary)
            ) {
                Text("Generate Schedule", fontSize = 16.sp, fontWeight = FontWeight.Bold)
            }
        }
    }

    if (showDatePicker) {
        DatePickerComponent(
            onDateSelected = { onDateChange(it) },
            onDismiss = { showDatePicker = false }
        )
    }
}

@Composable
fun TodaysSchedule() {
    val scheduleItems = listOf(
        "Water the prepared beds in the morning before transplanting.",
        "Transplant healthy seedlings maintaining 45-60cm spacings.",
        "Irrigate immediately after transplanting each section of seedlings."
    )
    Column(modifier = Modifier.padding(top = 24.dp)) {
        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.SpaceBetween,
            verticalAlignment = Alignment.CenterVertically
        ) {
            Text("Todays Schedule", style = MaterialTheme.typography.titleLarge, fontWeight = FontWeight.Bold)
            Text("Generated: July 22, 2025", style = MaterialTheme.typography.bodySmall, color = TextMutedLight)
        }
        Spacer(modifier = Modifier.height(16.dp))
        scheduleItems.forEachIndexed { index, text ->
            ScheduleStepItem(number = index + 1, text = text)
            Spacer(modifier = Modifier.height(12.dp))
        }
    }
}

@Composable
fun ScheduleStepItem(number: Int, text: String) {
    Card(
        shape = RoundedCornerShape(12.dp),
        colors = CardDefaults.cardColors(containerColor = CardLight.copy(alpha = 0.8f)),
        modifier = Modifier.fillMaxWidth()
    ) {
        Row(verticalAlignment = Alignment.CenterVertically) {
            Box(
                modifier = Modifier
                    .width(4.dp)
                    .height(60.dp)
                    .background(BlueSecondary, shape = RoundedCornerShape(topStart = 12.dp, bottomStart = 12.dp))
            )
            Text(
                text = "$number",
                fontSize = 24.sp,
                fontWeight = FontWeight.Bold,
                color = BlueSecondary,
                modifier = Modifier.padding(horizontal = 16.dp)
            )
            Text(
                text = text,
                modifier = Modifier.padding(end = 16.dp),
                style = MaterialTheme.typography.bodyLarge,
                color = TextPrimaryLight
            )
        }
    }
}

@Composable
fun FertilizerCalculatorButton(onClick: () -> Unit) {
    Button(
        onClick = onClick,
        modifier = Modifier.fillMaxWidth().height(70.dp),
        shape = RoundedCornerShape(16.dp),
        colors = ButtonDefaults.buttonColors(containerColor = BlueSecondary),
        contentPadding = PaddingValues(horizontal = 16.dp)
    ) {
        Row(
            modifier = Modifier.fillMaxWidth(),
            verticalAlignment = Alignment.CenterVertically
        ) {
            Icon(
                painter = painterResource(id = R.drawable.ic_calculator),
                contentDescription = null,
                // ▼▼▼ FIX: Set tint color for XML Vector Drawable ▼▼▼
                tint = Color.White
            )
            Spacer(modifier = Modifier.width(12.dp))
            Column {
                Text("Fertilizer Calculator", color = Color.White, fontWeight = FontWeight.Bold)
                Text("Plan your nutrient application", color = Color.White.copy(alpha = 0.8f), fontSize = 12.sp)
            }
            Spacer(modifier = Modifier.weight(1f))
            Icon(
                painter = painterResource(id = R.drawable.ic_arrow_right),
                contentDescription = "Navigate",
                // ▼▼▼ FIX: Set tint color for XML Vector Drawable ▼▼▼
                tint = Color.White
            )
        }
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
private fun DatePickerComponent(
    onDateSelected: (String) -> Unit,
    onDismiss: () -> Unit
) {
    val datePickerState = rememberDatePickerState()

    DatePickerDialog(
        onDismissRequest = { onDismiss() },
        confirmButton = {
            Button(
                onClick = {
                    datePickerState.selectedDateMillis?.let {
                        val sdf = SimpleDateFormat("dd/MM/yyyy", Locale.getDefault())
                        onDateSelected(sdf.format(Date(it)))
                    }
                    onDismiss()
                },
                enabled = datePickerState.selectedDateMillis != null
            ) {
                Text(text = "OK")
            }
        },
        dismissButton = {
            TextButton(onClick = { onDismiss() }) {
                Text(text = "Cancel")
            }
        }
    ) {
        DatePicker(state = datePickerState)
    }
}